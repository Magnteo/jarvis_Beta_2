import os
from colorama import init, Fore, Style
init()

file_txt = r"file_txt\task_maneger.txt"

def load_tasks(file):
    tasks=[]
    if os.path.exists(file):
        with open(file,"r",encoding="utf-8") as files:
            lines = files.readlines()
            for read in lines:
                parts =read.strip().split('|')
                if len(parts)==3:
                    cain={
                        "time": parts[0],
                        "priority": parts[1],
                        "text": parts[2]
                    }
                    tasks.append(cain)
        
    else:
        print("—Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
    return tasks

def save_tasks(tasks:list, file:str):
    with open(file,"w",encoding="utf-8") as files:
        for task in tasks:
            files.write(f"{task['time']}|{task['priority']}|{task['text']}\n")

def add_task(task:dict,tasks:list,file:str):
    for ts in tasks:
        if ts["text"]==task["text"]:
            return "—Ç–∞–∫–∞ –∑–∞–¥–∞—á–∞ –≤–∂–µ —î"
    tasks.append(task)
    save_tasks(tasks , file)
    return"–ó–∞–¥–∞—á–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞"

def edit_task(old_text: str, new_text: str, new_time: str, new_priority: str, tasks: list, file: str):
    for task in tasks:
        if task["text"] == old_text:
            task["text"] = new_text
            task["time"] = new_time
            task["priority"] = new_priority
            save_tasks(tasks, file)
            return "–ó–∞–¥–∞—á—É –æ–Ω–æ–≤–ª–µ–Ω–æ"
    return "–ó–∞–¥–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞"

def delet_task(text_to_delete,tasks, file ):
    for index, task in enumerate(tasks):
        if task["text"] == text_to_delete:
            del tasks[index]
            save_tasks(tasks,file)
            return "–ó–∞–¥–∞—á–∞ –≤–∏–¥–∞–ª–µ–Ω–∞"
    return"–ó–∞–¥–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞"

def clear_task(tasks:list,file:str):
    tasks.clear()
    save_tasks(tasks,file)
    return "–í—Å—ñ –∑–∞–¥–∞—á—ñ –≤–∏–¥–∞–ª–µ–Ω—ñ"

def priority_key(task):
    property_val=0 if task['priority'] =="–≤–∞–∂–ª–∏–≤–∞" else 1
    if task['time'] =="–ù–µ–º–∞—î –æ–±–º–µ–∂–µ–Ω—å":
        time_val="99:99"
    else:
        time_val=task['time']
    return(property_val,time_val)


def print_task(tasks):
    for task in tasks:
        color = Fore.RED if task['priority']=='–≤–∞–∂–ª–∏–≤–∞' else Fore.GREEN
        time_str =f"–î–æ {task['time']}" if task['time'] !="–ù–µ–º–∞—î –æ–±–º–µ–∂–µ–Ω—å" else "–ù–µ–º–∞—î –æ–±–º–µ–∂–µ–Ω—å"
        print(f"{color}{time_str}({task['priority']})-{task['text']}{Style.RESET_ALL}")
#–ó–Ω–∏–∑—É –∫–æ–ø—ñ–ø–∞—Å—Ç —á–∞—Ç–∞ –≥–ø—Ç
def input_priority():
    while True:
        p = input("–ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç (–≤–∞–∂–ª–∏–≤–∞/–Ω–µ–≤–∞–∂–ª–∏–≤–∞): ").strip().lower()
        if p in ["–≤–∞–∂–ª–∏–≤–∞", "–Ω–µ–≤–∞–∂–ª–∏–≤–∞"]:
            return p
        print("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.")

def task_menu():
    tasks = load_tasks(file_txt)
    print("–í—ñ–¥–∫—Ä–∏—Ç–æ –º–µ–Ω—é –∑–∞–¥–∞—á. –í–≤–µ–¥—ñ—Ç—å –∫–æ–º–∞–Ω–¥—É (–∞–±–æ '–≤–∏–π—Ç–∏'):")

    while True:
        command = input(">> ").strip().lower()

        if command == "–≤–∏–π—Ç–∏":
            print("–í–∏—Ö—ñ–¥ –∑ –º–µ–Ω—é –∑–∞–¥–∞—á.")
            break
        elif command == "–¥–æ–¥–∞—Ç–∏":
            text = input("–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á—ñ: ").strip()
            time = input("–î–æ —è–∫–æ–≥–æ —á–∞—Å—É? (–∞–±–æ '–ù–µ–º–∞—î –æ–±–º–µ–∂–µ–Ω—å'): ").strip()
            priority = input_priority()
            task = {"text": text, "time": time, "priority": priority}
            print(add_task(task, tasks, file_txt))
        elif command == "—Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏":
            old_text = input("–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á—ñ, —è–∫—É —Ö–æ—á–µ—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏: ").strip()
            new_text = input("–ù–æ–≤–∏–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á—ñ: ").strip()
            new_time = input("–ù–æ–≤–∏–π —á–∞—Å (–∞–±–æ '–ù–µ–º–∞—î –æ–±–º–µ–∂–µ–Ω—å'): ").strip()
            new_priority = input_priority()
            print(edit_task(old_text, new_text, new_time, new_priority, tasks, file_txt))
        elif command == "–≤–∏–¥–∞–ª–∏—Ç–∏":
            text_to_delete = input("–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á—ñ, —è–∫—É —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏: ").strip()
            print(delet_task(text_to_delete, tasks, file_txt))
        elif command == "–æ—á–∏—Å—Ç–∏—Ç–∏":
            confirm = input("–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ –∑–∞–¥–∞—á—ñ? (—Ç–∞–∫/–Ω—ñ): ").strip().lower()
            if confirm == "—Ç–∞–∫":
                print(clear_task(tasks, file_txt))
            else:
                print("–°–∫–∞—Å–æ–≤–∞–Ω–æ.")
        elif command == "–ø–æ–∫–∞–∑–∞—Ç–∏":
            if not tasks:
                print("üì≠ –ù–µ–º–∞—î –∑–∞–¥–∞—á.")
            else:
                print_tasks_sorted(tasks)
        else:
            print("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∞. –°–ø—Ä–æ–±—É–π—Ç–µ: –¥–æ–¥–∞—Ç–∏, —Ä–µ–¥–∞–≥—É–≤–∞—Ç–∏, –≤–∏–¥–∞–ª–∏—Ç–∏, –æ—á–∏—Å—Ç–∏—Ç–∏, –ø–æ–∫–∞–∑–∞—Ç–∏, –≤–∏–π—Ç–∏.")

def print_tasks_sorted(tasks):
    # –†–æ–∑–¥—ñ–ª—è—î–º–æ –∑–∞–¥–∞—á—ñ –∑–∞ –ø—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–æ–º
    important = [t for t in tasks if t['priority'] == '–≤–∞–∂–ª–∏–≤–∞']
    others = [t for t in tasks if t['priority'] != '–≤–∞–∂–ª–∏–≤–∞']

    print("\nüìå –í–∞–∂–ª–∏–≤—ñ –∑–∞–¥–∞—á—ñ:")
    print("------------------------------------")
    for task in sorted(important, key=priority_key):
        time_str = f"–î–æ {task['time']}" if task['time'] != "–ù–µ–º–∞—î –æ–±–º–µ–∂–µ–Ω—å" else "–ù–µ–º–∞—î –æ–±–º–µ–∂–µ–Ω—å"
        print(f"üî¥ {time_str} ({task['priority']}) ‚Äî {task['text']}")

    print("\nüü¢ –Ü–Ω—à—ñ –∑–∞–¥–∞—á—ñ:")
    print("------------------------------------")
    for task in sorted(others, key=priority_key):
        time_str = f"–î–æ {task['time']}" if task['time'] != "–ù–µ–º–∞—î –æ–±–º–µ–∂–µ–Ω—å" else "–ù–µ–º–∞—î –æ–±–º–µ–∂–µ–Ω—å"
        print(f"üü¢ {time_str} ({task['priority']}) ‚Äî {task['text']}")
